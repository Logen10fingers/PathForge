"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os  # Import os module to access environment variables
import dj_database_url  # Import dj_database_url for production database setup
import json  # Added for parsing CORS_ALLOWED_ORIGINS from JSON string

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# It's recommended to load SECRET_KEY from an environment variable in production
SECRET_KEY = os.environ.get("SECRET_KEY", "django-insecure-!!&($^yeg^6f0icne3x$8x^n@yy+ch+um8ui^3$^mjzp)nm=%q")


# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG based on environment variable, default to True for local development
DEBUG = os.environ.get("DEBUG", "True").lower() == "true"


# ALLOWED_HOSTS for Render deployment
ALLOWED_HOSTS = []
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')

if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
# Also add the general .onrender.com wildcard for flexibility
ALLOWED_HOSTS.append('.onrender.com')
# Add localhost for local development
ALLOWED_HOSTS.append('127.0.0.1')
ALLOWED_HOSTS.append('localhost')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # My Apps & Third-Party Apps
    "rest_framework",
    "corsheaders",
    "skills",
    "profiles",
    "ai_skills",
    "job_roles",
    "importer",
    "django_filters"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # Add WhiteNoise for serving static files in production
    "corsheaders.middleware.CorsMiddleware",  # Add this line
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Default to SQLite for local development
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Use PostgreSQL on Render by parsing the DATABASE_URL environment variable
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    DATABASES['default'] = dj_database_url.parse(DATABASE_URL)


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
# Ensure static files are collected into a 'staticfiles' directory at the root of the project
STATIC_ROOT = BASE_DIR / "staticfiles"

# Tell WhiteNoise to compress static files
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Removed the problematic 'if os.environ.get('RENDER') == 'true':' block
# Its functionality is either redundant or less secure than existing settings.
# DEBUG, ALLOWED_HOSTS, and WhiteNoise middleware are already handled above.


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Allow all origins only when DEBUG is True

CORS_ALLOWED_ORIGINS = []
cors_origins_env = os.environ.get('CORS_ALLOWED_ORIGINS')
if cors_origins_env:
    try:
        # Attempt to parse as JSON array (e.g., '["https://your-frontend.onrender.com"]')
        CORS_ALLOWED_ORIGINS = json.loads(cors_origins_env)
    except json.JSONDecodeError:
        # Fallback to comma-separated if it's not a valid JSON array string
        # This might happen if the env var was set as "url1,url2" instead of '["url1", "url2"]'
        CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_env.split(',')]


# Configure Django to trust the X-Forwarded-Proto header, which Render sets for HTTPS
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}